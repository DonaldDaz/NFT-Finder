{"ast":null,"code":"var _jsxFileName = \"/Users/davidazzato/Desktop/Tesi/Capitolo 3/WebApp/Prova Flask+React/FlaskreactProject/client/src/context.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useCallback } from \"react\";\nconst url = \"http://127.0.0.1:5000/nft\";\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [nfts, setNfts] = useState([]);\n  const [nrNft, setNrNft] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [nftInput, setNftInput] = useState(\"\");\n  const [searchPressed, setSearchPressed] = useState(false);\n  const [slider, setSlider] = useState(0);\n  const [showedNfts, setShowedNfts] = useState([]);\n\n  const getNewNfts = async () => {\n    try {\n      console.log(slider);\n      console.log(nrNft);\n      const response = await fetch(url + \"?description=\" + nftInput + \"&similarity=\" + slider + \"&number=\" + nrNft);\n      const data = await response.json(); // console.log(data.drinks);\n\n      setIsLoading(false);\n      setNfts(data.elements);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getNewNfts();\n  }, [searchPressed]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      nfts,\n      setNftInput,\n      isLoading,\n      nftInput,\n      setSearchPressed,\n      searchPressed,\n      slider,\n      setSlider,\n      nrNft,\n      setNrNft,\n      showedNfts,\n      setShowedNfts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/davidazzato/Desktop/Tesi/Capitolo 3/WebApp/Prova Flask+React/FlaskreactProject/client/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","nfts","setNfts","nrNft","setNrNft","isLoading","setIsLoading","nftInput","setNftInput","searchPressed","setSearchPressed","slider","setSlider","showedNfts","setShowedNfts","getNewNfts","console","log","response","fetch","data","json","elements","error","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,GAAG,GAAG,2BAAZ;AACA,MAAMC,UAAU,GAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACiB,aAAD,EAAgBC,gBAAhB,IAAoClB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACqB,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMuB,UAAU,GAAG,YAAY;AAC7B,QAAI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACA,YAAMe,QAAQ,GAAG,MAAMC,KAAK,CAACvB,GAAG,GAAG,eAAN,GAAsBW,QAAtB,GAA+B,cAA/B,GAA8CI,MAA9C,GAAqD,UAArD,GAAgER,KAAjE,CAA5B;AACA,YAAMiB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAJE,CAKF;;AACAf,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAJ,MAAAA,OAAO,CAACkB,IAAI,CAACE,QAAN,CAAP;AACD,KARD,CAQE,OAAOC,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,GAZD;;AAcA7B,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAS,IAAAA,UAAU;AACX,GAHQ,EAGN,CAACN,aAAD,CAHM,CAAT;AAMA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AACLR,MAAAA,IADK;AAELO,MAAAA,WAFK;AAGLH,MAAAA,SAHK;AAILE,MAAAA,QAJK;AAKLG,MAAAA,gBALK;AAMLD,MAAAA,aANK;AAOLE,MAAAA,MAPK;AAQLC,MAAAA,SARK;AASLT,MAAAA,KATK;AAULC,MAAAA,QAVK;AAWLS,MAAAA,UAXK;AAYLC,MAAAA;AAZK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBGd,QAhBH,CADF;AAoBD,CAjDD,C,CAkDA;;;AACA,OAAO,MAAMwB,gBAAgB,GAAG,MAAM;AACpC,SAAO/B,UAAU,CAACI,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { useCallback } from \"react\";\n\nconst url = \"http://127.0.0.1:5000/nft\";\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n  const [nfts, setNfts] = useState([]);\n  const [nrNft, setNrNft] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [nftInput, setNftInput] = useState(\"\");\n  const [searchPressed, setSearchPressed] = useState(false);\n  const [slider, setSlider] = useState(0);\n  const [showedNfts, setShowedNfts] = useState([])\n\n  const getNewNfts = async () => {\n    try {\n      console.log(slider)\n      console.log(nrNft)\n      const response = await fetch(url + \"?description=\"+nftInput+\"&similarity=\"+slider+\"&number=\"+nrNft);\n      const data = await response.json();\n      // console.log(data.drinks);\n      setIsLoading(false);\n      setNfts(data.elements);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getNewNfts();\n  }, [searchPressed]);\n\n\n  return (\n    <AppContext.Provider\n      value={{\n        nfts,\n        setNftInput,\n        isLoading,\n        nftInput,\n        setSearchPressed,\n        searchPressed,\n        slider,\n        setSlider,\n        nrNft,\n        setNrNft,\n        showedNfts,\n        setShowedNfts\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n"]},"metadata":{},"sourceType":"module"}