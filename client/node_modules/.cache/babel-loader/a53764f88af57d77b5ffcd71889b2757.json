{"ast":null,"code":"var _jsxFileName = \"/Users/davidazzato/Desktop/Tesi/Capitolo 3/WebApp/Prova Flask+React/FlaskreactProject/client/src/context.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useCallback } from \"react\";\nconst url = \"http://127.0.0.1:5000/nft\";\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [nfts, setNfts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [nftInput, setNftInput] = useState(\"\");\n  const [searchPressed, setSearchPressed] = useState(false);\n  /*const getInitialNfts = async () => {\n    try {\n      const response = await fetch(url + \"nft\");\n      const data = await response.json();\n      // console.log(data.drinks);\n      setIsLoading(false);\n      setNfts(data.elements);\n    } catch (error) {\n      console.log(error);\n    }\n  };*/\n\n  const getNewNfts = async () => {\n    try {\n      const response = await fetch(url + \"?description=\" + nftInput);\n      const data = await response.json(); // console.log(data.drinks);\n\n      setIsLoading(false);\n      setNfts(data.elements);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(false);\n    getNewNfts();\n  }, []);\n  useEffect(() => {\n    setIsLoading(true);\n    getNewNfts();\n    setSearchPressed(false);\n  }, [searchPressed]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      nfts,\n      setNftInput,\n      isLoading,\n      nftInput,\n      setSearchPressed,\n      searchPressed\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/davidazzato/Desktop/Tesi/Capitolo 3/WebApp/Prova Flask+React/FlaskreactProject/client/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","nfts","setNfts","isLoading","setIsLoading","nftInput","setNftInput","searchPressed","setSearchPressed","getNewNfts","response","fetch","data","json","elements","error","console","log","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,GAAG,GAAG,2BAAZ;AACA,MAAMC,UAAU,GAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,KAAD,CAAlD;AAGA;;;;;;;;;;;;AAWA,QAAMiB,UAAU,GAAG,YAAY;AAC7B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACf,GAAG,GAAG,eAAN,GAAsBS,QAAvB,CAA5B;AACA,YAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFE,CAGF;;AACAT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,OAAO,CAACU,IAAI,CAACE,QAAN,CAAP;AACD,KAND,CAME,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAVD;;AAWArB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAK,IAAAA,UAAU;AACX,GAHQ,EAGN,EAHM,CAAT;AAKAf,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,IAAAA,UAAU;AACVD,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GAJQ,EAIN,CAACD,aAAD,CAJM,CAAT;AAOA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AACLN,MAAAA,IADK;AAELK,MAAAA,WAFK;AAGLH,MAAAA,SAHK;AAILE,MAAAA,QAJK;AAKLG,MAAAA,gBALK;AAMLD,MAAAA;AANK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGP,QAVH,CADF;AAcD,CAvDD,C,CAwDA;;;AACA,OAAO,MAAMkB,gBAAgB,GAAG,MAAM;AACpC,SAAOzB,UAAU,CAACI,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { useCallback } from \"react\";\n\nconst url = \"http://127.0.0.1:5000/nft\";\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n  const [nfts, setNfts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [nftInput, setNftInput] = useState(\"\");\n  const [searchPressed, setSearchPressed] = useState(false);\n  \n\n  /*const getInitialNfts = async () => {\n    try {\n      const response = await fetch(url + \"nft\");\n      const data = await response.json();\n      // console.log(data.drinks);\n      setIsLoading(false);\n      setNfts(data.elements);\n    } catch (error) {\n      console.log(error);\n    }\n  };*/\n  const getNewNfts = async () => {\n    try {\n      const response = await fetch(url + \"?description=\"+nftInput);\n      const data = await response.json();\n      // console.log(data.drinks);\n      setIsLoading(false);\n      setNfts(data.elements);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    setIsLoading(false);\n    getNewNfts();\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getNewNfts();\n    setSearchPressed(false)\n  }, [searchPressed]);\n\n\n  return (\n    <AppContext.Provider\n      value={{\n        nfts,\n        setNftInput,\n        isLoading,\n        nftInput,\n        setSearchPressed,\n        searchPressed\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n"]},"metadata":{},"sourceType":"module"}